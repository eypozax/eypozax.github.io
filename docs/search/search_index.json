{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentations, Manuals, and Tutorials","text":""},{"location":"SQE/","title":"SQE: Scriptable Questionnaire Ecosystem","text":"<p>SQE is a Scriptable questionnaire ecosystem that allows users to create and customize their own questionnaires using a simple and intuitive syntax.</p> <p>Here\u2019s a comparison of before vs after:</p>"},{"location":"SQE/#reference-documents","title":"Reference Documents","text":"<p>Each document dives into a specific feature.</p> <ul> <li>Example </li> <li>Print </li> <li>Choice </li> <li> <p>Page</p> </li> <li> <p>function.md</p> </li> <li>title.md</li> </ul>"},{"location":"SQE/syntax/choice/","title":"Choice","text":"<p>SQE covers both \"Boolean (yes/no) questions\" and \"multiple questions\" under one umbrella, \"choice.\"</p> <pre><code>choice &lt;VARIABLE NAME&gt; {\n&lt;Question&gt;\n&lt;Button 1&gt; &gt;&gt; &lt;Button 1 value&gt;\n...\n&lt;Button n&gt; &gt;&gt; &lt;Button n value&gt;\n}\n</code></pre> <pre><code>choice q1 {\nChoose one of these buttons\nButton one &gt;&gt; 1\nButton two &gt;&gt; 2\nButton three &gt;&gt; 3\nButton four &gt;&gt; 4\n}\n</code></pre> <p></p>"},{"location":"SQE/syntax/example/","title":"Examples","text":"<pre><code>import css \"styles.css\"\nimport js \"base.js\"\nimport html \"index.html\"\n\n@p page 1\n\ninsert Welcome!\n\nboolean q1 {\nDo you like this company?\ntrue &gt;&gt; 0\nfalse &gt;&gt; 1\n}\n\n@p page 2\n\nmultiple_choice my_multiple_choice {\nq2val\nWhich one do you prefer?\nwindows &gt;&gt; 0\nmacos &gt;&gt; 1\nlinux &gt;&gt; 2\n}\n\n\n@p page 3\n\ninsert thanks!\n\n</code></pre>"},{"location":"SQE/syntax/function/","title":"Functions","text":"<p>HTML CSS JS</p>"},{"location":"SQE/syntax/function/#block-types","title":"Block Types","text":""},{"location":"SQE/syntax/function/#html","title":"<code>html { ... }</code>","text":"<ul> <li>Inserts raw HTML directly where the block appears.</li> <li>Best for placeholders or static markup fragments.</li> </ul>"},{"location":"SQE/syntax/function/#css","title":"<code>css { ... }</code>","text":"<ul> <li>Wrapped in a <code>&lt;style&gt;</code> tag and inserted inline where the block appears.</li> <li>\u26a0\ufe0f For cleaner organization, consider consolidating CSS into the page head (see Best Practices).</li> </ul>"},{"location":"SQE/syntax/function/#js","title":"<code>js { ... }</code>","text":"<ul> <li>Treated as per-page setup scripts.</li> <li>Collected into <code>PAGE_SCRIPTS</code> and executed by the runtime.</li> <li>Runs inside an async IIFE (immediately invoked async function).</li> <li>May be re-run automatically when answers change.</li> </ul>"},{"location":"SQE/syntax/function/#execution-model","title":"Execution Model","text":"<p>Flow overview:</p> <pre><code>User input\n   \u2193\ncollectAnswers() updates state\n   \u2193\nwindow.SQE_ANSWERS refreshed\n   \u2193\nrunScriptsForPage() re-executes js { ... } blocks\n   \u2193\nPlaceholders update\n</code></pre> <p>Key details:</p> <ul> <li>Scripts live in a per-page array called <code>PAGE_SCRIPTS</code>.</li> <li>Runtime executes them via <code>runScriptsForPage(...)</code>.</li> <li>Script objects look like:</li> </ul> <p><code>json   { \"script\": \"&lt;source&gt;\" }   { \"id\": \"placeholder-id\", \"script\": \"&lt;source&gt;\" }</code> * If an <code>id</code> is present, the runtime looks up a matching placeholder:</p> <p>```html  </p> <p><code>`` * By default,</code>js { ... }<code>blocks are setup scripts (no</code>id<code>). To update placeholders, pair with an</code>html { ... }` block.</p>"},{"location":"SQE/syntax/function/#accessing-answers","title":"Accessing Answers","text":"<p>SQE exposes a small API to your scripts:</p> <ul> <li><code>window.SQE_ANSWERS</code> \u2192 object holding all collected answers.</li> <li><code>SQE.getAnswer(key)</code> \u2192 retrieve stored answer.</li> <li><code>SQE.setAnswer(key, value)</code> \u2192 set an answer programmatically (triggers re-run).</li> <li><code>SQE.collectAnswers()</code> \u2192 scan DOM inputs (<code>data-sqe-key</code>) and refresh answers.</li> </ul> <p>Supported input types:</p> <ul> <li>Radios and checkboxes \u2192 arrays of values</li> <li>Text inputs \u2192 strings</li> </ul>"},{"location":"SQE/syntax/function/#example-usage","title":"Example Usage","text":""},{"location":"SQE/syntax/function/#1-placeholder-js-renderer","title":"1. Placeholder + JS Renderer","text":"<pre><code>html {\n  &lt;div data-sqe-fn=\"my_result\"&gt;&lt;/div&gt;\n}\n\njs {\n  (async function(){\n    const id = \"my_result\";\n\n    function render() {\n      const a = window.SQE_ANSWERS || {};\n      const v = a[\"q1\"];\n      const res = (v === 1 || v === \"1\") ? \"Yes\"\n               : (v === 0 || v === \"0\") ? \"No\"\n               : \"No answer\";\n\n      const target = document.querySelector('[data-sqe-fn=\"'+id+'\"]');\n      if (!target) return;\n\n      target.innerHTML = '';\n      const d = document.createElement('div');\n      d.className = 'text-block';\n      d.textContent = res;\n      target.appendChild(d);\n    }\n\n    // run once; runtime will re-run on input/change\n    render();\n  }());\n}\n</code></pre>"},{"location":"SQE/syntax/function/#2-using-sqe-helpers","title":"2. Using SQE Helpers","text":"<pre><code>js {\n  (function(){\n    const val = SQE.getAnswer(\"q1\");\n    if (val == null) {\n      SQE.insert(\"No answer yet\");\n    } else {\n      SQE.insert(\"Answer: \" + String(val));\n    }\n  }());\n}\n</code></pre>"},{"location":"SQE/syntax/function/#best-practices","title":"Best Practices","text":"<ul> <li>Keep logic in <code>js {}</code>, markup in <code>html {}</code>, styles in <code>css {}</code>.</li> <li>Prefer SQE APIs (<code>SQE.getAnswer</code>, <code>SQE.setAnswer</code>, <code>SQE.insert</code>) over manual DOM manipulation.</li> <li>Runtime debounces script re-runs (30ms), so avoid heavy DOM work inside event handlers.</li> <li>Multi-select checkboxes \u2192 treat values as arrays.</li> <li>For one-time scripts, add a guard (e.g. <code>if (window.__init_done) return;</code>).</li> <li>\u26a0\ufe0f Security: Untrusted JS runs in page context. Sanitize inputs or isolate in a Worker if needed.</li> </ul>"},{"location":"SQE/syntax/function/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Answers stale? Check console logs: <code>[SQE] collectAnswers:</code></li> <li>Placeholder not updating? Ensure <code>html { ... }</code> uses the right <code>data-sqe-fn</code> and your <code>js { ... }</code> writes into it.</li> <li>Trigger updates manually: use <code>SQE.setAnswer(key, value)</code> to re-run scripts.</li> </ul>"},{"location":"SQE/syntax/function/#reference","title":"Reference","text":"<ul> <li>Runtime &amp; script execution \u2192 <code>q_generator/src/convert.rs</code></li> <li>JS item implementation \u2192 <code>q_generator/src/items/js.rs</code></li> <li>HTML item implementation \u2192 <code>q_generator/src/items/html.rs</code></li> <li>CSS item implementation \u2192 <code>q_generator/src/items/css.rs</code></li> </ul> <p>Would you like me to also prep a short \u201cQuick Start\u201d version (just 1\u20132 examples, minimal detail) for devs who don\u2019t want to wade through the runtime model on first read?</p>"},{"location":"SQE/syntax/page/","title":"Page","text":"<p>Each Survey/Questionnaire can be devided into multiple pages, using <code>@p</code> flag:</p> <pre><code>@p &lt;PAGE 1 NAME&gt;\n&lt;PAGE 1&gt;\n@p &lt;PAGE 2 NAME&gt;\n&lt;PAGE 2&gt;\n</code></pre> <p>For example:</p> <pre><code>@p page 1\n\n@p page 2\n</code></pre> <p> and then... </p>"},{"location":"SQE/syntax/print/","title":"Print","text":"<p>To print, <code>insert</code> method is used:</p> <pre><code>insert &lt;TEXT&gt;\n</code></pre> <pre><code>insert Hello World!\n</code></pre> <p></p> <p>To print multiple line text, use curly brackets:</p> <pre><code>insert {\n&lt;MULTIPLE LINES&gt;\n}\n</code></pre> <pre><code>insert {\nline 1\nline 2 \n}\n</code></pre> <p></p>"},{"location":"SQE/syntax/title/","title":"Title","text":"<p>Set one universal title for the entire questionnaire/survey</p> <pre><code>title name\n</code></pre> <p>For example:</p> <pre><code>title Hello World\n</code></pre> <p></p>"},{"location":"urplans/","title":"URPlans Overview","text":""},{"location":"urplans/#made-by-maifoss-and-eypozax","title":"MADE BY MAIFOSS AND EYPOZAX","text":"<p>URPlans is a lightweight task\u2010planning core written in Java that is based on Eisenhower Matrix and is powered by Spring Data JPA, Hibernate, and Project Lombok. You can run it as a standalone CLI tool to insert, list, show, delete, and search tasks backed by an H2 file\u2010based database.</p> <p>Key features:</p> <ul> <li>Java 21 compatible, built with Maven</li> <li>Uses Eisenhower Matrix method</li> <li>Persistence via Spring Data JPA + Hibernate, defaulting to H2 file storage  </li> <li>CLI\u2010only runner reading non-option arguments (no web server by default)  </li> <li>Deployable as a standalone jar: <code>target/urplans-1.0-SNAPSHOT.jar</code> </li> <li>Supports filtering by date, priority, paging, and full-text search  </li> </ul> <p>Use URPlans to manage simple to-do items, recurring schedules, or integrate its core into larger Spring Boot apps.</p> <p>Setup Usage Artitecture</p>"},{"location":"urplans/architecture/","title":"Artitecture","text":"<p>Inside src/main/java/org/maifoss/urplans/, the project is organized into clear slices.</p>"},{"location":"urplans/architecture/#cliclirunnerjava","title":"cli/CliRunner.java","text":"<p>The <code>cli/CliRunner.java</code> class is responsible for orchestrating command\u2011line interactions. It reads non\u2011option arguments and maps them to task operations such as insert, list, search, and delete. This class parses and validates each flag and its accompanying arguments, and it prints concise results to the command line for the user.</p>"},{"location":"urplans/architecture/#configquerydslconfigjava","title":"config/QuerydslConfig.java","text":"<p>The <code>config/QuerydslConfig.java</code> class provides the configuration needed for Querydsl, including beans such as <code>JPAQueryFactory</code> that enable type\u2011safe dynamic queries. It wires the <code>EntityManager</code> into the Querydsl factories and centralizes the query infrastructure so that it can be reused across repositories and services.</p>"},{"location":"urplans/architecture/#controllertaskcontrollerjava","title":"controller/TaskController.java","text":"<p>The <code>controller/TaskController.java</code> class exposes task operations through HTTP endpoints when the application is running in web mode. It defines REST mappings for create, list, search, and delete operations, maps incoming request payloads to domain objects, validates the inputs, delegates the calls to <code>TaskService</code>, and returns the results in JSON format.</p>"},{"location":"urplans/architecture/#repotaskrepositorycustomjava","title":"repo/TaskRepositoryCustom.java","text":"<p>The <code>repo/TaskRepositoryCustom.java</code> interface defines custom query operations that are not covered by the standard Spring Data JPA method names. It serves as the contract for implementing search APIs with filters for title, date, and priority, and it is typically paired with <code>TaskRepositoryCustomImpl</code>, which uses Querydsl to build dynamic predicates.</p>"},{"location":"urplans/architecture/#servicetaskservicejava","title":"service/TaskService.java","text":"<p>The <code>service/TaskService.java</code> class acts as the business fa\u00e7ade, coordinating validation, repository access, and transactional behavior. It is responsible for creating new tasks by parsing the <code>\"Title|Description|Date&gt;FOREVER|PRIORITY\"</code> format, validating the date and priority, and persisting the entity. It can list all tasks or filter them by date, supports pagination for search results, and performs searches by combining optional filters such as title, date, and priority through the custom repository. It also handles deletions by removing a task based on its ID, ensuring the task exists before performing the operation.</p>"},{"location":"urplans/architecture/#taskjava","title":"Task.java","text":"<p>The <code>Task.java</code> class is the JPA entity representing a task in the system. It defines the fields <code>id</code>, <code>title</code>, <code>description</code>, <code>dueDate</code>, and <code>priority</code>, and maps them to the database table used for task storage.</p>"},{"location":"urplans/architecture/#taskrepositoryjava","title":"TaskRepository.java","text":"<p>The <code>TaskRepository.java</code> interface is a Spring Data JPA repository for <code>Task</code>. It provides the standard CRUD operations such as create, read, update, and delete, without requiring explicit SQL or JPQL code.</p>"},{"location":"urplans/architecture/#urplansapplicationjava","title":"UrplansApplication.java","text":"<p>The <code>UrplansApplication.java</code> class is the Spring Boot application entry point. It contains the <code>main</code> method, which bootstraps the Spring context and launches the application in either CLI or web mode depending on configuration.</p> <p>Back \u2192</p>"},{"location":"urplans/setup/","title":"Setup","text":"<p>Follow these steps to setup <code>urplans</code>:</p>"},{"location":"urplans/setup/#1-install-dependencies","title":"1. Install dependencies","text":"<p>Make sure the following are installed on your system:</p> <ul> <li>Java Development Kit (JDK) 21 or later (includes the JRE)  </li> <li>Apache Maven 3.6+  </li> <li>Git (for cloning the repository)</li> </ul>"},{"location":"urplans/setup/#2-clone-the-repository","title":"2. Clone the repository","text":"<p>Use one of these commands to clone URPlans:</p> <ul> <li>via HTTPS:    <code>git clone https://github.com/MaiFOSS/urplans.git</code></li> <li>via SSH:    <code>git@github.com:MaiFOSS/urplans.git</code></li> <li>via Github CLI:    <code>gh repo clone MaiFOSS/urplans</code></li> </ul> <p>Alternatively, you can clone via your IDE\u2019s Git integration.</p>"},{"location":"urplans/setup/#3-build-the-project","title":"3. Build the project","text":"<p>3.1. Move to the project's directory</p> <pre><code>cd urplans\n</code></pre> <p>3.2 Secondly, build the file:</p> <pre><code>mvn -DskipTests clean package\n</code></pre> <p>The output should be similar to this:</p> <pre><code>[INFO] Scanning for projects...\n[INFO] \n[INFO] --------------------&lt; org.maifoss.urplans:urplans &gt;---------------------\n...\n[INFO] BUILD SUCCESS\n...\n</code></pre> <p>The built JAR will be at <code>target/urplans-1.0-SNAPSHOT.jar</code></p> <p>You\u2019re all set! Run URPlans with:</p> <pre><code>java -jar target/urplans-1.0-SNAPSHOT.jar\n</code></pre> <p>Usage \u2192</p>"},{"location":"urplans/usage/","title":"Usage","text":"<p>Here's the text converted to Markdown:</p> <pre><code># How to Use URPlans CLI\n\nURPlans provides a command-line interface (CLI) that reads non-option arguments (i.e. arguments that aren\u2019t Spring properties).  \n\n## Command Syntax\n\n```bash\njava -jar target/urplans-1.0-SNAPSHOT.jar &lt;command&gt; [parameters]\n</code></pre>"},{"location":"urplans/usage/#available-commands","title":"Available Commands","text":"<ul> <li>Insert a new task.   <code>-i \"Title|Description|&lt;startDate&gt;&gt;&lt;endDate&gt;|&lt;PRIORITY&gt;\"</code> </li> <li>Show tasks for a specific date.  <code>-s &lt;YYYY-MM-DD&gt;</code> </li> <li>List all tasks.  <code>-l</code> </li> <li> <p>Delete a task by its ID. <code>-d &lt;id&gt;</code> </p> </li> <li> <p>Search tasks by keyword, date, priority, and pagination parameters.  <code>--search &lt;keyword&gt; &lt;date&gt; &lt;priority&gt; &lt;page&gt; &lt;size&gt;</code> </p> </li> </ul> <p>Date format: <code>YYYY-MM-DD</code> Priority values: - <code>URGENT_IMPORTANT</code> - <code>NOT_URGENT_IMPORTANT</code> - <code>URGENT_NOT_IMPORTANT</code> - <code>NOT_URGENT_NOT_IMPORTANT</code></p> <p>Learn more in the Eisenhower Matrix guide</p>"},{"location":"urplans/usage/#examples","title":"Examples","text":"<p>Insert a task </p> <pre><code>java -jar target/urplans-1.0-SNAPSHOT.jar \\\n  -i \"Study Java|Prepare for certification|2025-08-13&gt;FOREVER|URGENT_IMPORTANT\"\n</code></pre> <p>Show tasks for a date </p> <pre><code>java -jar target/urplans-1.0-SNAPSHOT.jar -s 2025-08-13\n</code></pre> <p>List all tasks </p> <pre><code>java -jar target/urplans-1.0-SNAPSHOT.jar -l\n</code></pre> <p>Delete a task by ID </p> <pre><code>java -jar target/urplans-1.0-SNAPSHOT.jar -d 42\n</code></pre> <p>Search tasks with filters and pagination </p> <pre><code>java -jar target/urplans-1.0-SNAPSHOT.jar \\\n  --search \"java\" 2025-08-13 URGENT_IMPORTANT 0 20\n</code></pre> <p>Artitecture \u2192</p>"}]}